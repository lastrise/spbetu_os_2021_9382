TESTPC  SEGMENT

ASSUME CS:TESTPC, DS:TESTPC, ES:NOTHING, SS:NOTHING

ORG 100H

STARTUP: JMP START

MCB_NUMBER                  DB      "MCB #",                                          '$'
NEWLINE                     DB                                              0DH, 0AH, '$'
DECIMAL_NUMBER              DB      "   ",                                            '$'
MCB_RECORD_SIZE             DB      "SIZE:        ",                                  '$'
SC_SD                       DB      "SC/SD: ",                                        '$'
MCB_ADDRESS                 DB      "ADDRESS:      ",                                 '$'
AVAILABLE_MEM_SIZE          DB      "AVAILABLE MEMORY SIZE:        BYTES",  0DH, 0AH, '$'
PSP_ADDRESS                 DB      "PSP ADDRESS:      ",                             '$'
EXTENDED_MEMORY_SIZE        DB      "EXTENDED MEMORY SIZE:        BYTES",   0DH, 0AH, '$'


TETR_TO_HEX PROC NEAR
    AND AL, 0FH
    CMP AL, 09
    JBE NEXT
    ADD AL, 07

NEXT:
    ADD AL, 30H
    RET
TETR_TO_HEX ENDP


BYTE_TO_HEX PROC NEAR
    PUSH CX
    MOV AH, AL
    CALL TETR_TO_HEX
    XCHG AL, AH
    MOV CL, 4
    SHR AL, CL
    CALL TETR_TO_HEX
    POP CX
    RET
BYTE_TO_HEX ENDP


WRD_TO_HEX PROC NEAR
    PUSH BX
    MOV BH, AH
    CALL BYTE_TO_HEX
    MOV [DI], AH
    DEC DI
    MOV [DI], AL
    DEC DI
    MOV AL, BH
    CALL BYTE_TO_HEX
    MOV [DI], AH
    DEC DI
    MOV [DI], AL
    POP BX
    RET
WRD_TO_HEX ENDP


BYTE_TO_DEC PROC NEAR
    PUSH CX
    PUSH DX
    XOR AH, AH
    XOR DX, DX
    MOV CX, 10

LOOP_BD:
    DIV CX
    OR DL, 30H
    MOV [SI], DL
    DEC SI
    XOR DX, DX
    CMP AX, 10
    JAE LOOP_BD

    CMP AL, 00H
    JE END_L
    OR AL, 30H
    MOV [SI], AL

END_L:
    POP DX
    POP CX
    RET
BYTE_TO_DEC ENDP


PARAGRAPH2BYTES PROC
    PUSH AX
    PUSH BX
    PUSH CX
    PUSH DX
    PUSH SI

	MOV BX, 10H
	MUL BX
	MOV BX, 0AH
	XOR CX, CX

DIVISION:
	DIV BX
	PUSH DX
	INC CX
	XOR DX, DX
	CMP AX, 0H
	JNZ DIVISION

WRITE_SYMBOL:
	POP DX
	OR DL, 30H
	MOV [SI], DL
	INC SI
	LOOP WRITE_SYMBOL

    POP SI
    POP DX
    POP CX
    POP BX
    POP AX
	RET
PARAGRAPH2BYTES ENDP


PRINT_NEWLINE PROC NEAR
    PUSH AX
    PUSH DX

    MOV DX, OFFSET NEWLINE
    MOV AH, 9H
    INT 21H

    POP DX
    POP AX

    RET
PRINT_NEWLINE ENDP


WRITE_STRING PROC NEAR
    PUSH AX
    MOV AH, 9H
    INT 21H
    POP AX
    RET
WRITE_STRING ENDP


PRINT_MEM_SIZE PROC NEAR
    MOV AH, 4AH
    MOV BX, 0FFFFH
    INT 21H

    MOV AX, BX
    MOV SI, OFFSET AVAILABLE_MEM_SIZE
    ADD SI, 23
    CALL PARAGRAPH2BYTES

    MOV DX, OFFSET AVAILABLE_MEM_SIZE
    CALL WRITE_STRING

    MOV AL, 30H
    OUT 70H, AL
    IN AL, 71H

    MOV AL, 31H
    OUT 70H, AL
    IN AL, 71H
    MOV AH, AL

    MOV SI, OFFSET EXTENDED_MEMORY_SIZE
    ADD SI, 22
    CALL PARAGRAPH2BYTES

    MOV DX, OFFSET EXTENDED_MEMORY_SIZE
    CALL WRITE_STRING

    RET
PRINT_MEM_SIZE ENDP


PRINT_MCB_RECORD PROC NEAR
    PUSH AX
    PUSH DX
    PUSH SI
    PUSH DI
    PUSH CX

    MOV AX, ES
    MOV DI, OFFSET MCB_ADDRESS
    ADD DI, 12
    CALL WRD_TO_HEX
    MOV DX, OFFSET MCB_ADDRESS
    CALL WRITE_STRING

    MOV AX, ES:[1]
    MOV DI, OFFSET PSP_ADDRESS
    ADD DI, 16
    CALL WRD_TO_HEX
    MOV DX, OFFSET PSP_ADDRESS
    CALL WRITE_STRING

    MOV AX, ES:[3]
    MOV SI, OFFSET MCB_RECORD_SIZE
    ADD SI, 6
    CALL PARAGRAPH2BYTES
    MOV DX, OFFSET MCB_RECORD_SIZE
    CALL WRITE_STRING

    MOV BX, 8
    MOV DX, OFFSET SC_SD
    CALL WRITE_STRING
    MOV CX, 7

PRINT_SCSD:
    MOV DL, ES:[BX]
    MOV AH, 02H
    INT 21H
    INC BX
    LOOP PRINT_SCSD

    POP CX
    POP DI
    POP SI
    POP DX
    POP AX

    RET
PRINT_MCB_RECORD ENDP


OFFSET_DECIMAL_NUMBER PROC NEAR
OFFSET_LOOP:
    CMP BYTE PTR [SI], ' '
    JNE EXIT_OFFSET_DECIMAL
    INC SI
    JMP OFFSET_LOOP

EXIT_OFFSET_DECIMAL:
    RET
OFFSET_DECIMAL_NUMBER ENDP


PRINT_MCB_TABLE PROC NEAR

    PUSH ES

    MOV AH, 52H
    INT 21H
    MOV ES, ES:[BX-2]
    MOV CL, 1

PRINT_MCB_INFO:
    MOV DX, OFFSET MCB_NUMBER
    CALL WRITE_STRING

    MOV AL, CL
    MOV SI, OFFSET DECIMAL_NUMBER
    ADD SI, 2
    CALL BYTE_TO_DEC
    CALL OFFSET_DECIMAL_NUMBER
    MOV DX, SI
    CALL WRITE_STRING

    MOV DL, ':'
    MOV AH, 02H
    INT 21H
    MOV DL, ' '
    MOV AH, 02H
    INT 21H

    CALL PRINT_MCB_RECORD
    CALL PRINT_NEWLINE

    MOV AL, ES:[0]
    CMP AL, 5AH
    JE EXIT

    MOV BX, ES:[3]
    MOV AX, ES
    ADD AX, BX
    INC AX
    MOV ES, AX

    INC CL
    JMP PRINT_MCB_INFO

EXIT:

    POP ES

    RET
PRINT_MCB_TABLE ENDP


FREE_MEME PROC NEAR
    LEA AX, EOF
    MOV BX, 10H
    XOR DX, DX
    DIV BX
    INC AX
    MOV BX, AX
    MOV AL, 0
    MOV AH, 4AH
    INT 21H

    RET
FREE_MEME ENDP


START:
    CALL PRINT_MEM_SIZE
    CALL FREE_MEME
    CALL PRINT_MCB_TABLE

    XOR AL, AL
    MOV AH, 4CH
    INT 21H


EOF:
TESTPC  ENDS
END STARTUP
